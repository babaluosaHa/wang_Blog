进程
--------------
	1.运行时（runtime）应用程序
	2.进程之间的内存不是共享（独占）
	3.进程间通信使用的socket(套接字)

多线程
--------------
	1.进程内并发执行的代码段
	2.线程之间共享内存
	3.创建灵活响应的桌面程序（带界面的程序）。
	4.每个运行着的线程对应一个stack。

java.lang.thread
-------------------------
	1.Thread.yield()方法
		让当前线程让出cpu抢占权，具有谦让之意，瞬时的动作
	2.Thread.join()
		当前线程等待指定的线程结束后才能继续运行。
		Thread t=...
		t.join();
		...
	3.Thread.sleep()
		让当前线程休眠，需要捕获异常
		释放cpu抢占权，和锁旗标的监控权没有关系。
	4.daemon
		守护，服务员
		为其他线程提供服务的线程
		若进程中剩余的线程都是守护线程的话，则进程终止了。
		Thread.setDaemon(true);
	5.--
		原子性操作
	6.线程间通信，共享资源的问题
		锁，防止并发访问。由并行改为串行
		参照物，锁旗标
		//同步代码块
		synchronized{
			...
		}
		同步代码块执行期间，线程始终持有对象的监控权，其他线程处于阻塞状态
	7. 同步方法是以当前所在对象做锁旗标
		synchronized(this)===同步方法。
	8.同步静态方法，使用类作为同步标记
		public static synchronized xxxx(...){
		...
		}	
	9.wait 
		让当前线程进入锁旗标的等待队列。释放cpu抢占权，还释放锁旗标的监控权。
	10.解决死锁的问题
		notifyAll()通知所有线程可以抢占cpu和锁旗标的监控权。
		wait(1000);
	操作		cpu抢占权	监控权
----------------------------------------------------------
	join		   /		   /
	yield           暂时释放	   /
	wait              释放            释放
	sleep             释放           不释放
	notify
	notifyall

	11.如果一个类已经继承了其他类(java中不允许多重继承），可以借助runnable接口实现
	   多线程